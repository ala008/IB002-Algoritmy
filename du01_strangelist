
# IB002 Extra domaci ukol 1.
#
# Vasi ulohou v tomto priklade je modifikovat jiz existujici strukturu
# oboustranne zretezeneho linearniho seznamu.
#
# Oboustranne zretezeny seznam je definovan ukazatelem first, ktery
# ukazuje na zacatek seznamu, a ukazatelem last, ktery ukazuje na konec
# seznamu.
#
# Seznam s uzly a, b, c, d, e, f vypada bezne takto (v nakresu
# vynechavame ukazatele first a last):
#       ___   ___   ___   ___   ___
#      /   \ /   \ /   \ /   \ /   \
#     a <-- b <-- c <-- d <-- e <-- f
#
# kde obloucky nad pismeny reprezentuji dopredne sipky (napr. a --> b),
# tedy ukazatele next.
#
# Nas modifikovany StrangeList pouziva pro reprezentaci stejne promenne,
# pouze ukazatele ukazuji jinam. Ukazatele next budou ukazovat ob jeden
# uzel, ukazatele prev zustanou zachovany. Po prevedeni predchoziho
# seznamu na StrangeList vznikne takovyto seznam (opet vynechavame
# ukazatele first a last):
#       _________   _________
#      /         \ /         \
#     a <-- b <-- c <-- d <-- e <-- f
#            \_________/ \_________/
#
# StrangeList je take definovan ukazatelem first, ktery ukazuje na jeho
# zacatek, a ukazatelem last, ktery ukazuje na jeho konec, v tomto pripade
# first - a, last - f.


# Ukol 1.
# Definujte datovou strukturu StrangeList.
# Muzete se inspirovat definici ze zakladniho domaciho ukolu.

class Node:
    """Trida Node slouzi pro reprezentaci objektu v oboustranne
    spojovanem seznamu.

    Atributy:
        value   reprezentuje ulozenou hodnotu/objekt
        next    reference na nasledujici prvek v seznamu
        prev    reference na predchazejici prvek v seznamu
    """
    def __init__(self):
        self.value = None
        self.next = None
        self.prev = None


class LinkedList:
    """Trida LinkedList reprezentuje spojovany seznam.

    Atributy:
        first   reference na prvni prvek seznamu
        last    reference na posledni prvek seznamu
    """
    def __init__(self):
        self.first = None
        self.last = None


class StrangeList:
    """Trida StrangeList reprezentuje spojovany seznam.

    Atributy:
        first   reference na prvni prvek seznamu
        last    reference na posledni prvek seznamu
    """
    def __init__(self):
        self.first = None
        self.last = None


# Ukol 2.
# Implementujte metodu list_to_strange_list, ktera z oboustranne
# zretezeneho seznamu vytvori nas StrangeList.
# Reprezentaci oboustranne zretezeneho seznamu muzete prevzit ze
# zakladniho domaciho ukolu.

def list_to_strange_list(linkedList):
    strangeList = StrangeList()
    l = Node()
    if linkedList.first is not None:
        # Kopie linkedList do strangeList
        l = linkedList.first
        while l is not None:
            s = Node() 
            s.value = l.value
            s.next = None 
            s.prev = strangeList.last
            if strangeList.first is None:
                strangeList.first = s
            else:
                # ukazatel o 2 dopÅ™edu
                if strangeList.last.prev is not None:
                    strangeList.last.prev.next = s         
            strangeList.last = s
            l = l.next

    return strangeList


# Ukol 3.
# Implementujte metodu check_strange_list, ktera zkontroluje, ze
# ukazatele first a last jsou nastaveny spravne.

def check_strange_list(strangeList):
    pass


def insert(linkedList, value):
    """Metoda insert() vlozi na konec seznamu linkedList (za prvek last)
    novy uzel s hodnotou value.
    """
    n = Node()
    n.value = value
    n.next = None
    n.prev = linkedList.last
    if linkedList.first is None:
        linkedList.first = n
    else:
        linkedList.last.next = n
    linkedList.last = n

def print_list(linkedList, nadpis):
    """Metoda print_list() vypise odzadu seznam."""
    n = Node()

    print(nadpis)
    n = linkedList.last
    while n is not None:
        print(n.value, end = ",")
        if n.prev is not None:
            print(n.prev.value, end = ",")
        else:
            print("-", end = ",")
        if n.next is not None:
            print(n.next.value)
        else:
            print("-")
        n = n.prev
    print()


def test_strange_list():
    linkedList = LinkedList()
    for i in range(1, 5):
        insert(linkedList, i)
    strangeList = list_to_strange_list(linkedList)
    print_list(linkedList, "linkedList(value,prev,next)")
    print_list(strangeList, "strangeList(value,prev,next)")

    check_strange_list(strangeList)

test_strange_list()
